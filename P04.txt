-- ~\~ language=Haskell filename=P04.txt
-- ~\~ begin <<docs/README.md|P04>>[0]
-- | W2.4 Equational reasoning
data Tree a = Leaf a | Node (Tree a) (Tree a)

size :: Tree a -> Int
size (Leaf a  ) = 1
size (Node l r) = size l + size r

flatten :: Tree a -> [a]
flatten (Leaf a  ) = [a]
flatten (Node l r) = flatten l ++ flatten r

length :: [a] -> Int
length []       = 0
length (x : xs) = 1 + length xs

(++) :: [a] -> [a] -> [a]
[]       ++ ys = ys
(x : xs) ++ ys = x : (xs ++ ys)
-- ~\~ end
-- ~\~ begin <<docs/README.md|P04>>[1]
-- | Subtask 2.4.1
-- forall (xs :: [a]) (ys :: [a])
-- length (xs ++ ys) = length xs + length ys
-- ~\~ end
-- ~\~ begin <<docs/README.md|P04>>[2]
-- | Subtask 2.4.1
-- forall (t :: Tree a).
-- length (flatten t) = size t
-- ~\~ end
